"""Generador de Templates de Archivos para Progol EngineProporciona ejemplos exactos de estructura de archivos"""import pandas as pdimport jsonfrom pathlib import Pathfrom datetime import datetime, timedeltafrom src.utils.logger import get_loggerlogger = get_logger("template_generator")def generar_template_progol_prediccion(jornada=2287, num_partidos=14):    """    Genera template para archivo de partidos a predecir (SIN resultados)    """    fecha_base = datetime.now().strftime("%Y-%m-%d")        # Equipos de ejemplo variados    equipos_ejemplo = [        "Am√©rica", "Chivas", "Cruz Azul", "Pumas", "Tigres", "Monterrey",        "Santos", "Toluca", "Le√≥n", "Pachuca", "Atlas", "Necaxa",         "Puebla", "Quer√©taro", "Tijuana", "Ju√°rez", "Mazatl√°n", "San Luis",        "Barcelona", "Real Madrid", "Manchester City", "Liverpool",         "Bayern Munich", "PSG", "Inter Milan", "Juventus"    ]        data = []    for i in range(1, num_partidos + 1):        home_idx = (i-1) * 2 % len(equipos_ejemplo)        away_idx = (home_idx + 1) % len(equipos_ejemplo)                data.append({            'concurso_id': jornada,            'fecha': fecha_base,            'match_no': i,            'liga': 'Liga MX' if i <= 10 else 'Premier League',            'home': equipos_ejemplo[home_idx],            'away': equipos_ejemplo[away_idx]        })        df = pd.DataFrame(data)    return dfdef generar_template_progol_historico(jornada=2287, num_partidos=14):    """    Genera template para archivo hist√≥rico (CON resultados)    """    df = generar_template_progol_prediccion(jornada, num_partidos)        # Agregar resultados aleatorios realistas    import random        resultados_data = []    for _, row in df.iterrows():        # Generar goles con distribuci√≥n realista        l_g = random.choices([0, 1, 2, 3, 4], weights=[20, 30, 25, 15, 10])[0]        a_g = random.choices([0, 1, 2, 3, 4], weights=[25, 30, 25, 15, 5])[0]                if l_g > a_g:            resultado = 'L'        elif l_g < a_g:            resultado = 'V'        else:            resultado = 'E'                resultados_data.append({            'l_g': l_g,            'a_g': a_g,            'resultado': resultado,            'premio_1': 0,            'premio_2': 0        })        # Combinar datos    for i, data_extra in enumerate(resultados_data):        for key, value in data_extra.items():            df.loc[i, key] = value        return dfdef generar_template_odds(jornada=2287, num_partidos=14):    """    Genera template para archivo de momios    """    df_base = generar_template_progol_prediccion(jornada, num_partidos)        # Generar momios realistas    import random        odds_data = []    for _, row in df_base.iterrows():        # Momios realistas (suma inversa ~1.05-1.08 para margen casa)        base_probs = [            random.uniform(0.35, 0.55),  # Local            random.uniform(0.20, 0.35),  # Empate            random.uniform(0.25, 0.45)   # Visitante        ]                # Normalizar y agregar vigorish        total = sum(base_probs)        probs_norm = [p/total for p in base_probs]        vigorish = random.uniform(1.05, 1.08)        probs_vig = [p/vigorish for p in probs_norm]                # Convertir a momios        odds = [round(1/p, 2) for p in probs_vig]                odds_data.append({            'concurso_id': row['concurso_id'],            'match_no': row['match_no'],            'fecha': row['fecha'],            'home': row['home'],            'away': row['away'],            'odds_L': odds[0],            'odds_E': odds[1],             'odds_V': odds[2]        })        return pd.DataFrame(odds_data)def generar_template_elo(jornada=2287, equipos_df=None):    """    Genera template para archivo de ELO    """    if equipos_df is not None:        # Usar equipos del archivo base        data = []        for _, row in equipos_df.iterrows():            # ELO realista basado en tipo de liga            if 'Liga MX' in str(row.get('liga', '')):                elo_home = random.randint(1400, 1700)                elo_away = random.randint(1400, 1700)                factor_local = 0.45            else:                elo_home = random.randint(1500, 1900)                elo_away = random.randint(1500, 1900)                factor_local = 0.40                        data.append({                'home': row['home'],                'away': row['away'],                'fecha': row['fecha'],                'elo_home': elo_home,                'elo_away': elo_away,                'factor_local': factor_local            })    else:        # Crear datos b√°sicos        import random        equipos = ["Team_A", "Team_B", "Team_C", "Team_D"]        fecha = datetime.now().strftime("%Y-%m-%d")                data = []        for i in range(14):            data.append({                'home': f"Team_{chr(65+i)}",                'away': f"Team_{chr(65+i+14)}",                'fecha': fecha,                'elo_home': random.randint(1400, 1800),                'elo_away': random.randint(1400, 1800),                'factor_local': 0.45            })        return pd.DataFrame(data)def generar_template_squad_values(jornada=2287, equipos_df=None):    """    Genera template para archivo de valores de plantilla    """    if equipos_df is not None:        # Extraer equipos √∫nicos        equipos = pd.concat([equipos_df['home'], equipos_df['away']]).unique()    else:        equipos = [f"Team_{chr(65+i)}" for i in range(28)]        import random        data = []    for equipo in equipos:        # Valores realistas seg√∫n tipo de equipo        if any(grande in equipo for grande in ['Am√©rica', 'Chivas', 'Cruz Azul', 'Barcelona', 'Real Madrid']):            squad_value = random.randint(80, 150)  # Millones EUR            avg_age = random.uniform(26.0, 29.0)            internationals = random.randint(8, 15)        else:            squad_value = random.randint(15, 60)            avg_age = random.uniform(24.0, 27.0)            internationals = random.randint(2, 8)                data.append({            'team': equipo,            'squad_value': squad_value,            'avg_age': round(avg_age, 1),            'internationals': internationals        })        return pd.DataFrame(data)def generar_template_previas_json(jornada=2287, equipos_df=None):    """    Genera template para archivo de previas en JSON    """    if equipos_df is not None:        num_partidos = len(equipos_df)    else:        num_partidos = 14        import random        previas_data = []    for i in range(1, num_partidos + 1):        # Forma reciente realista        formas_posibles = ['WWWWW', 'WWWWD', 'WWDDD', 'WDDDD', 'DDDDD', 'DDDLW', 'WWLLL']                previas_data.append({            'match_id': f"{jornada}-{i}",            'form_H': random.choice(formas_posibles),            'form_A': random.choice(formas_posibles),            'h2h_H': random.randint(0, 5),            'h2h_E': random.randint(0, 3),            'h2h_A': random.randint(0, 5),            'inj_H': random.randint(0, 3),            'inj_A': random.randint(0, 3),            'context_flag': random.choice([                [],                ['derbi'],                ['final'],                ['derbi', 'lluvia'],                ['final', 'neutral']            ])        })        return previas_datadef crear_todos_los_templates(jornada=None, output_dir="data/templates"):    """    Crea todos los templates de una vez    """    if jornada is None:        jornada = int(datetime.now().strftime("%Y%m%d")[-4:])  # √öltimos 4 d√≠gitos de fecha        output_path = Path(output_dir)    output_path.mkdir(parents=True, exist_ok=True)        logger.info(f"Generando templates para jornada {jornada}")        # 1. Template de Progol para predicci√≥n    df_progol_pred = generar_template_progol_prediccion(jornada)    pred_file = output_path / f"progol_{jornada}_PREDICCION.csv"    df_progol_pred.to_csv(pred_file, index=False)    logger.info(f"‚úÖ Template creado: {pred_file}")        # 2. Template de Progol hist√≥rico    df_progol_hist = generar_template_progol_historico(jornada)    hist_file = output_path / f"progol_{jornada}_HISTORICO.csv"    df_progol_hist.to_csv(hist_file, index=False)    logger.info(f"‚úÖ Template creado: {hist_file}")        # 3. Template de Odds    df_odds = generar_template_odds(jornada)    odds_file = output_path / f"odds_{jornada}.csv"    df_odds.to_csv(odds_file, index=False)    logger.info(f"‚úÖ Template creado: {odds_file}")        # 4. Template de ELO    df_elo = generar_template_elo(jornada, df_progol_pred)    elo_file = output_path / f"elo_{jornada}.csv"    df_elo.to_csv(elo_file, index=False)    logger.info(f"‚úÖ Template creado: {elo_file}")        # 5. Template de Squad Values    df_squad = generar_template_squad_values(jornada, df_progol_pred)    squad_file = output_path / f"squad_value_{jornada}.csv"    df_squad.to_csv(squad_file, index=False)    logger.info(f"‚úÖ Template creado: {squad_file}")        # 6. Template de Previas JSON    previas_data = generar_template_previas_json(jornada, df_progol_pred)    json_dir = Path("data/json_previas")    json_dir.mkdir(parents=True, exist_ok=True)    previas_file = json_dir / f"previas_{jornada}.json"    with open(previas_file, 'w', encoding='utf-8') as f:        json.dump(previas_data, f, indent=2, ensure_ascii=False)    logger.info(f"‚úÖ Template creado: {previas_file}")        # 7. Crear README con instrucciones    readme_content = f"""# üìã Templates de Archivos - Progol Engine## üéØ Jornada: {jornada}### ‚úÖ Archivos Requeridos (OBLIGATORIOS):1. **progol_{jornada}.csv** - Partidos a predecir   - Estructura: concurso_id, fecha, match_no, liga, home, away   - ‚ö†Ô∏è NO debe tener columnas de resultados (l_g, a_g, resultado)2. **odds_{jornada}.csv** - Momios de casas de apuestas     - Estructura: concurso_id, match_no, fecha, home, away, odds_L, odds_E, odds_V   - Los momios deben ser en formato decimal### üìä Archivos Opcionales (se crean autom√°ticamente si faltan):3. **elo_{jornada}.csv** - Ratings ELO de equipos   - Estructura: home, away, fecha, elo_home, elo_away, factor_local4. **squad_value_{jornada}.csv** - Valores de plantillas   - Estructura: team, squad_value, avg_age, internationals5. **previas_{jornada}.json** - Informaci√≥n contextual   - Formato JSON con forma, H2H, lesiones, flags contextuales## üöÄ C√≥mo Usar:1. **Para PREDICCI√ìN**: Usa `progol_{jornada}_PREDICCION.csv` como base2. **Para AN√ÅLISIS HIST√ìRICO**: Usa `progol_{jornada}_HISTORICO.csv` como base3. Modifica los archivos con tus datos reales4. Sube los archivos a `data/raw/` 5. Ejecuta el pipeline## üìù Notas Importantes:- ‚ö° La app detecta autom√°ticamente la estructura de tus archivos- üîÑ Los nombres pueden variar (progol.csv, Progol.csv, etc.)- üéØ La jornada se detecta autom√°ticamente del contenido o nombre- üíæ Los archivos opcionales se generan con valores por defecto si faltan## üîç Verificaci√≥n:Usa el script de diagn√≥stico para verificar que tus archivos est√°n correctos:```bashpython -m src.utils.template_generator diagnose```"""        readme_file = output_path / "README.md"    with open(readme_file, 'w', encoding='utf-8') as f:        f.write(readme_content)    logger.info(f"‚úÖ Instrucciones creadas: {readme_file}")        return {        'jornada': jornada,        'archivos_creados': [            str(pred_file), str(hist_file), str(odds_file),            str(elo_file), str(squad_file), str(previas_file)        ],        'directorio': str(output_path)    }def diagnose_uploaded_files():    """    Diagnostica archivos subidos por el usuario    """    from src.etl.build_features import detectar_estructura_archivo, detectar_jornada_automaticamente        raw_path = Path("data/raw")    if not raw_path.exists():        return {"error": "Directorio data/raw no encontrado"}        archivos = list(raw_path.glob("*.csv"))    if not archivos:        return {"error": "No se encontraron archivos CSV en data/raw"}        diagnostico = {        'jornada_detectada': detectar_jornada_automaticamente(),        'archivos_analizados': [],        'problemas': [],        'recomendaciones': []    }        for archivo in archivos:        try:            df = pd.read_csv(archivo)            info = detectar_estructura_archivo(df, archivo.name)                        diagnostico['archivos_analizados'].append({                'archivo': archivo.name,                'tipo': info['tipo'],                'registros': info['registros'],                'problemas': info['problemas']            })                        if info['problemas']:                diagnostico['problemas'].extend([f"{archivo.name}: {p}" for p in info['problemas']])                except Exception as e:            diagnostico['problemas'].append(f"{archivo.name}: Error de lectura - {e}")        # Generar recomendaciones    tipos_encontrados = [a['tipo'] for a in diagnostico['archivos_analizados']]        if 'progol_prediccion' not in tipos_encontrados and 'progol_historico' not in tipos_encontrados:        diagnostico['recomendaciones'].append("‚ùå Falta archivo de Progol")        if 'odds' not in tipos_encontrados:        diagnostico['recomendaciones'].append("‚ùå Falta archivo de Odds")        if not diagnostico['problemas']:        diagnostico['recomendaciones'].append("‚úÖ Archivos principales detectados correctamente")        return diagnosticoif __name__ == "__main__":    import sys        if len(sys.argv) > 1 and sys.argv[1] == "diagnose":        # Modo diagn√≥stico        resultado = diagnose_uploaded_files()        print(json.dumps(resultado, indent=2, ensure_ascii=False))    else:        # Modo generaci√≥n de templates        resultado = crear_todos_los_templates()        print(f"‚úÖ Templates creados en: {resultado['directorio']}")        print(f"üìÖ Jornada: {resultado['jornada']}")        print(f"üìÅ Archivos: {len(resultado['archivos_creados'])}")